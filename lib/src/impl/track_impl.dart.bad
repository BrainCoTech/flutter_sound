import 'dart:async';
import 'dart:typed_data';

import 'package:flutter_sound/src/audio.dart';
import 'package:flutter_sound/src/audio_session/track_audio_session.dart';
import 'package:flutter_sound/src/plugins/audio_session.dart';
import 'package:flutter_sound/src/plugins/sound_player_track_plugin.dart';

import '../codec.dart';
import '../playback_disposition.dart';
import '../sound_player.dart';
import 'sound_player_impl.dart';
import 'track.dart';

typedef TrackAction = void Function(Track current);

///
/// This is the internal implementation of the [Track]
/// class.
///
/// An implementation has been used to hide a number of api
/// calls that need to be visible to other classes but which
/// are not part of our public api.
///
class TrackImpl implements Track {
  SoundPlayerImpl _player;
  TrackAudioSession _audioSession;

  /// The title of this track
  String trackTitle;

  /// The name of the author of this track
  String trackAuthor;

  /// The URL that points to the album art of the track
  String albumArtUrl;

  /// The asset that points to the album art of the track
  String albumArtAsset;

  TrackImpl.fromAudio(AudioTrackURI audio) {
    _player = SoundPlayerImpl.fromAudio(audio);
    _initialize();
  }

  ///
  TrackImpl.fromPath(String url, {Codec codec}) {
    _player = SoundPlayerImpl.fromAudio(url, codec: codec);
    _initialize();
  }

  ///
  TrackImpl.fromPath(String url, {Codec codec}) {
    _player = SoundPlayerImpl.fromPath(url, codec: codec);
    _initialize();
  }

  ///
  TrackImpl.fromBuffer(Uint8List dataBuffer, {Codec codec}) {
    _player = SoundPlayerImpl.fromBuffer(dataBuffer, codec: codec);
    _initialize();
  }

  void _initialize() {
    _audioSession = TrackAudioSession(SoundPlayerTrackPlugin());
    _player.useTrackPlayer();

    _player.onStarted = _onStarted;
    _player.onFinished = _onFinished;
    _player.onStopped = _onStopped;
    _player.onPaused = _onPaused;
    _player.onResumed = _onResumed;
  }

  /// Proxy forwards

  Future<void> play() {
    _player.play(track: this);
  }

  Future<void> pause() => _player.pause();

  Future<void> resume() => _player.resume();

  Future<void> stop() => _player.stop();

  Future<void> seekTo(Duration position) => _player.seekTo(position);

  Future<void> release() => _player.release();

  Future<void> setVolume(double volume) => _player.setVolume(volume);

  ///
  Future<void> requestAudioFocus({bool enabled}) => _player.requestAudioFocus();

  ///
  Future<void> abandonAudioFocus({bool enabled}) => _player.abandonAudioFocus();

  void closeDispositionStream() => _player.closeDispositionStream();

  Stream<PlaybackDisposition> dispositionStream(
          {Duration interval = const Duration(milliseconds: 100)}) =>
      _player.dispositionStream(interval: interval);

  bool get isPlaying => _player.isPlaying;

  bool get isPaused => _player.isPaused;

  bool get isStopped => _player.isStopped;

  set hushOthers(bool hush) => _player.hushOthers = hush;

  PlayerEvent _onFinished;
  PlayerEventWithCause _onPaused;
  PlayerEventWithCause _onResumed;
  PlayerEventWithCause _onStarted;
  PlayerEventWithCause _onStopped;
}
